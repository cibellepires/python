# -*- coding: utf-8 -*-
"""LISTA04NUMPYEPANDAS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S4V9VvAGHakj0UidXBkYw5RxVJrFNdE3
"""



"""LISTA DE NUMPY E PANDAS"""

#EX1

import numpy as np
lista=np.array([1,2,3,4,5])
print(lista)

#ex2

import numpy as np
lista=np.array([1,2,3,4,5,6,7,8,9,10])
media=np.mean(lista)
desvio=np.std(lista)
mediana=np.median(lista)
print(lista)
print(media)
print(desvio)
print(mediana)

#ex3
import numpy as np
a=np.arange(100)
pares=a[a%2==0]
print(pares)

#ex4
import numpy as np
c=np.array([22,25,33,30,29,36])
f=(c*1.8)+32
print(f)

#ex5
import numpy as np
matriz=np.random.randint(1,11, size=(3,3))
soma_coluna=np.sum(matriz, axis=0)
soma_linhas=np.sum(matriz, axis=1)
print(matriz)
print(soma_coluna)
print(soma_linhas)

#ex6
lista=np.array([1,2,3,4,5,6,7,8,9])
matriz=lista.reshape(3,3)
print(matriz)

#ex7
import numpy as np
w=np.random.randint(0,101, size=20)
p=w[np.logical_and(w>30, w<70)]
print(w)
print(p)

#ex8
import numpy as np
import numpy as np

# Criar matrizes 2x2
A = np.array([[1, 2],
              [3, 4]])

B = np.array([[5, 6],
              [7, 8]])

print("Matriz A:")
print(A)
print("\nMatriz B:")
print(B)
c=np.dot(A,B)
print("\nProduto das Matrizes:")
print(c)

#ex9

import numpy as np

def elementos_unicos_entre_arrays(arr1, arr2):
    """
    Retorna os elementos que existem em apenas um dos dois arrays.

    Parâmetros:
    arr1, arr2: arrays de entrada (podem ter dimensões quaisquer)

    Retorna:
    Array NumPy com elementos únicos entre os arrays, ordenados.
    """
    # Encontra os elementos únicos em cada array
    unique1 = np.unique(arr1)
    unique2 = np.unique(arr2)

    # Concatena e conta as ocorrências de cada elemento
    concatenados = np.concatenate((unique1, unique2))
    elementos, counts = np.unique(concatenados, return_counts=True)

    # Filtra os elementos que aparecem apenas uma vez
    return elementos[counts == 1]

# Exemplo de uso
a = np.array([1, 2, 3, 4, 5])
b = np.array([3, 4, 5, 6, 7])

print("Elementos únicos:", elementos_unicos_entre_arrays(a, b))

#ex10
import numpy as np

def simulador_roleta(numero_rodadas):

    # Gera números aleatórios entre 1 e 100
    numeros_sorteados = np.random.randint(1, 101, size=numero_rodadas)

    # Conta as ocorrências de cada número
    numeros_unicos, contagens = np.unique(numeros_sorteados, return_counts=True)

    # Cria um dicionário {número: repetições}
    resultado = dict(zip(numeros_unicos, contagens))

    return resultado

# Exemplo de uso
if __name__ == "__main__":
    rodadas = 1000  # Altere para o número desejado de rodadas
    repetições = simulador_roleta(rodadas)

    print(f"Números sorteados e suas repetições (em {rodadas} rodadas):")
    for numero, count in sorted(repetições.items()):
        print(f"Número {numero}: {count} vez(es)")

#ex1 de pandas
!pip install pandas odfpy
import pandas as pd
import pandas as pd

# 1. Lê o arquivo .ods
df = pd.read_excel("vendasdeprodutos.ods", engine="odf")  # Lê a primeira aba por padrão

# 2. Salva como CSV
df.to_csv("vendasdeprodutos.csv", index=False, encoding="utf-8")

# 3.  Lê o CSV gerado
df_csv = pd.read_csv("vendasdeprodutos.csv")
print(df_csv.head())

print('=-'*30)

#filtrar produtos acima de R$5
filtro_de_preço=df_csv[df_csv['preco'] > 5.0]
print(filtro_de_preço)

print('=-'*30)

#adicionar nova coluna 'valor total' que seja a multilplicaçao de preço e estoque
df_csv['valor total'] = df_csv['preco'] * df_csv['estoque']
print(df_csv)

print('=-'*30)

#colocar os valores em ordem decrescente
df_csv_ordenado = df_csv.sort_values(by="valor total", ascending=False)
print(df_csv_ordenado)

#ex 2 dataframe  com dicionario
import pandas as pd
data={'nome':['Ana', 'Carlos', 'Beatriz'], 'idade':['22', '25','30'], 'nota':[2.0,10.0,7.5]}
df=pd.DataFrame(data)
media=df['nota'].mean()
print(df)
print(media)
print('=-'*30)
#ex 6 ordenar da maior nota pra menor
df_ordenado=df.sort_values(by='nota', ascending=False)
print(df_ordenado)

#EX3 crianção de dataframe com dados aleatorios e renomeando as colunas
import pandas as pd
import numpy as np
data=np.random.randint(0,11, size=(5,3))
df=pd.DataFrame(data, columns=['A', 'B', 'C'])
print(df)

print('=-'*30)

#ex4 filtros
filtro1=df[df>5]
print(filtro1)

print('=-'*30)
filtro2 = df[df['B'] > 7]
print(filtro2)


print('=-'*30)
#ex 5 adicionando novas linhas com valores manuais
new={'A':9, 'B': 10, 'C':8}
df.loc[len(df)]=new
print(df)

#ex7 agrupamento em dataframe
import pandas as pd
dados={'produto': ['lápis', 'caneta', 'refrigerante', 'suco', 'tesoura', 'grampeador', 'cadeira', 'escrivaninha', 'café', 'água'], 'categoria': ['Papelaria', 'Papelaria', 'Mercado', 'Mercado', 'Papelaria', 'Escritório','Escritório', 'Escritório', 'Mercado', 'Mercado'], 'preco':[10,10,15,20,20,25,50,40,10,2]}
df=pd.DataFrame(dados)
print(df)

print('=-'*30)

#agrupado por quantidade
df_agrupado=df.groupby('categoria')['preco'].count()
print(df_agrupado)

print('=-'*30)

#agrupado por media dos preços
df_agrupado2=df.groupby('categoria')['preco'].mean()
print(df_agrupado2)

#ex8 tratamento de valores ausentes
import pandas as pd
dados={'nome':['Ana', 'Bruna', 'Carla', 'Dani'], 'idade': [10,np.nan,15,23 ], 'nota1': [10, 8,np.nan, 6], 'nota2':[2,np.nan,6, 4]}
df=pd.DataFrame(dados)
print(df)

print('=-'*30)

df_preenchido=df.fillna(0)
print(df_preenchido)

print('=-'*30)

#media das notas
df_preenchido=df[['nota1', 'nota2']].mean()
print(df_preenchido)

#ex10 exportação de um dataframe e leitura com filtro de linhas
import pandas as pd
dados={'produto': ['lápis', 'caneta', 'refrigerante', 'suco', 'tesoura', 'grampeador', 'cadeira', 'escrivaninha', 'café', 'água'], 'categoria': ['Papelaria', 'Papelaria', 'Mercado', 'Mercado', 'Papelaria', 'Escritório','Escritório', 'Escritório', 'Mercado', 'Mercado'], 'preco':[10,10,15,20,20,25,50,40,10,2]}
df=pd.DataFrame(dados)
print(df)

df.to_csv('dados.csv', index=False)

#ex10 exibindo o dataframe apenas da segunda linha em diante
df_csv=pd.read_csv('dados.csv', skiprows=1)
print(df_csv)

#ex1 analise estatistica numpy+pandas
import pandas as pd
import numpy as np
dados={'nome': ['Ana', 'Bruno', 'Carlos', 'Diana'], 'prova1': [7,8,9,1], 'prova2': [5,6,7,8], 'prova3': [10,9,2,1]}
df=pd.DataFrame(dados)
print(df)

print('=-'*30)

#media do alunos
df['media']=df[['prova1', 'prova2', 'prova3']].mean(axis=1)
print(df)
print('=-'*30)

#adicionando a media como uma nova coluna
df['media']=df.apply(lambda row: (row['prova1'] + row['prova2'] + row['prova3']) / 3, axis=1)
print(df)

print('-='*30)
def aprovação(media):
  if media>=7:
    return 'Aprovado'
  elif 5<=media<7:
    return 'Recuperação'
  else:
    return 'Reprovado'
df['situação']=df['media'].apply(aprovação)
print(df)

#ex3 operações vetoriais com colunas
import numpy as np
dados = {
'produto': ['A', 'B', 'C'],
'jan': [100, 200, 150],
'fev': [120, 180, 130],
'mar': [130, 190, 160]
}
data=pd.DataFrame(dados)
print(data)

#média mensal de cada produto
data['media_mensal'] = data[['jan', 'fev', 'mar']].mean(axis=1)
print(data)

#ex4 simulação com dados aleatórios
import numpy as np
import pandas as pd
arquivos={ 'cliente_id': np.random.randint(1,101,size=100), 'valor_compra': np.random.randint(10,501, size=100), 'frequencia': np.random.randint(1,21,size=100)}
df=pd.DataFrame(arquivos)
print(df)
print('=-'*30)
# descobrir a pontuação dos clientes
df['pontuação_cliente']=df['valor_compra']*df['frequencia']
print(df)
print('=-'*30)
#media da pontuação dos clientes
df_media=df['pontuação_cliente'].mean()
print(df_media)
print('=-'*30)
#mostrando apenas dos clientes acima da media
filtro=df[df['pontuação_cliente']>df_media]
print(filtro)
print('=-'*30)

#ex5 categorização com estatíticas e funções
bins=[25,50,75,100]
labels=['bronze','prata','ouro','diamante']
percentis = np.arange(0, 101, 10)  # [0, 10, 20, ..., 100]

# Para a coluna pontuação_cliente
percentis_valor = np.percentile(df['pontuação_cliente'], percentis)
print("Percentis para pontuação do cliente:")
print(pd.DataFrame({'Percentil': percentis, 'Valor': percentis_valor}))
#classificação
df['categoria']=pd.cut(df['pontuação_cliente'], bins=bins, labels=labels)
print(df)

